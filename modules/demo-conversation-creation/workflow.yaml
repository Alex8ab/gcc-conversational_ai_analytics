main:
  params: [args]
  steps:
    - getRandomNumber:
        call: http.get
        args:
          url: http://www.randomnumberapi.com/api/v1.0/random?min=100&max=10000&count=1
        result: random_number
    - init:
        assign:
          - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          - region: "us-central1"
          - random_conversation_uri: ${"gs://ccai-sample-data-8854/chat_"+random_number.body[0]+".json"}
    - logConversationUri:
        call: sys.log
        args:
          text: ${"Conversation gs uri:"+random_conversation_uri}
          severity: "INFO" # Optional
    - uploadConversation:
        call: http.post
        args:
          url: ${"https://contactcenterinsights.googleapis.com/v1/projects/" + project_id + "/locations/" + region + "/conversations:upload"}
          headers:
            Content-Type: application/json
          auth:
            type: OAuth2
          body:
            conversation:
              dataSource:
                gcsSource: 
                  transcriptUri: ${random_conversation_uri}
        result: uploadConversationResult
    - logConversationId:
        call: sys.log
        args:
          text: ${"Conversation Id:"+uploadConversationResult.body.metadata.request.conversationId}
          severity: "INFO" # Optional
    - logUploadOperationName:
        call: sys.log
        args:
          text: ${"Conversation upload name:"+uploadConversationResult.body.name}
          severity: "INFO" # Optional
    - waitUntilUploadFinishes:
        call: ConversationUploadWaitUntilDone
        args:
          operation_name: ${uploadConversationResult.body.name}
    - analyzeConversation:
        call: http.post
        args:
          url: ${"https://contactcenterinsights.googleapis.com/v1/"+uploadConversationResult.body.metadata.request.parent+"/conversations/"+uploadConversationResult.body.metadata.request.conversationId+"/analyses"}
          headers:
            Content-Type: application/json
          auth:
            type: OAuth2
          body:
            name: "dummy" #the API needs to receive a body
        result: analyzeConversationResult
    - logAnalyzeConversationResponse:
        call: sys.log
        args:
          data: ${analyzeConversationResult.body}
          severity: "INFO" # Optional
ConversationUploadWaitUntilDone:
  params: [operation_name]
  steps:
    - init:
        assign:
          - is_done: false
    - check_condition:
        switch:
          - condition: ${is_done == false}
            next: iterate
        next: exit_success
    - iterate:
        steps:
          - sleep30s:
              call: sys.sleep
              args:
                seconds: 5
          - logUrl:
              call: sys.log
              args:
                text: ${"https://contactcenterinsights.googleapis.com/v1/"+operation_name}
                severity: "INFO"
          - requestStatus:
              call: http.get
              args:
                url: ${"https://contactcenterinsights.googleapis.com/v1/"+operation_name}
                auth:
                  type: OAuth2
              result: requestStatusResponse
          - getStatus:
              assign:
                - is_done: ${requestStatusResponse.body.done}
          - log:
              call: sys.log
              args:
                text: ${"Current="+is_done}
                severity: "INFO"
        next: check_condition
    - exit_success:
        return: ${is_done}
    - exit_fail:
        raise: ${"Job in unexpected terminal status "}
      